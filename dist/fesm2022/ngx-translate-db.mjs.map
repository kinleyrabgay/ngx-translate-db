{"version":3,"file":"ngx-translate-db.mjs","sources":["../../src/lib/services/translate-db.service.ts","../../src/lib/services/translate.service.ts","../../src/lib/pipes/translate.pipe.ts","../../src/lib/providers/translate.provider.ts","../../src/public-api.ts","../../src/ngx-translate-db.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { openDB, IDBPDatabase, deleteDB } from 'idb';\nimport { TranslationConfig, TranslationValue } from '../interfaces/translation.interface';\n\n/**\n * Service responsible for managing translation data in IndexedDB.\n * Provides methods for caching and retrieving translations.\n * \n * @remarks\n * This service uses the 'idb' library for IndexedDB operations.\n * All operations are asynchronous and return Promises.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationDBService {\n  /** IndexedDB database instance */\n  private db!: IDBPDatabase;\n  \n  /** Default store name for translations */\n  private readonly STORE_NAME = 'translations';\n  \n  /** Default database name */\n  private readonly DEFAULT_DB_NAME = 'translations-db';\n  \n  /** Default database version */\n  private readonly DB_VERSION = 1;\n\n  /**\n   * Initializes the IndexedDB database for translations.\n   * Creates the necessary object store if it doesn't exist.\n   * \n   * @param config - Optional configuration for database setup\n   * @throws {Error} If database initialization fails\n   */\n  async init(config?: TranslationConfig): Promise<void> {\n    try {\n      const dbName = config?.dbName ?? this.DEFAULT_DB_NAME;\n      \n      this.db = await openDB(dbName, this.DB_VERSION, {\n        upgrade: (db) => this.createObjectStore(db),\n        blocked: () => {\n          console.warn('Database upgrade blocked. Please close other tabs using this app.');\n        },\n        blocking: () => {\n          this.db.close();\n          console.warn('Database version change detected. Please reload the page.');\n        },\n      });\n    } catch (error) {\n      console.error('Error initializing translation database:', error);\n    }\n  }\n\n  /**\n   * Saves a translation value to the cache.\n   * \n   * @param key - Translation key\n   * @param value - Translation value object\n   * @throws {Error} If the database is not initialized or save fails\n   */\n  async saveToCache(key: string, value: TranslationValue): Promise<void> {\n    this.ensureDBInitialized();\n    try {\n      await this.db.put(this.STORE_NAME, value, key);\n    } catch (error) {\n      console.error('Error saving translation to cache:', error);\n    }\n  }\n\n  /**\n   * Retrieves a translation value from the cache.\n   * \n   * @param key - Translation key to retrieve\n   * @returns Promise resolving to the translation value or null if not found\n   * @throws {Error} If the database is not initialized\n   */\n  async getFromCache(key: string): Promise<TranslationValue | null> {\n    this.ensureDBInitialized();\n    try {\n      return await this.db.get(this.STORE_NAME, key);\n    } catch (error) {\n      console.error('Error retrieving translation from cache:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Retrieves all translations from the cache.\n   * \n   * @returns Promise resolving to an object containing all translations\n   * @throws {Error} If the database is not initialized\n   */\n  async getAllFromCache(): Promise<{ [key: string]: TranslationValue }> {\n    this.ensureDBInitialized();\n    try {\n      const allEntries = await this.db.getAll(this.STORE_NAME);\n      const allKeys = await this.db.getAllKeys(this.STORE_NAME);\n      \n      return allEntries.reduce((acc, value, index) => {\n        const key = allKeys[index]?.toString();\n        if (key) {\n          acc[key] = value;\n        }\n        return acc;\n      }, {} as { [key: string]: TranslationValue });\n    } catch (error) {\n      console.error('Error retrieving all translations from cache:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Clears all translations from the cache.\n   * \n   * @throws {Error} If the database is not initialized or clear fails\n   */\n  async clearCache(): Promise<void> {\n    this.ensureDBInitialized();\n    try {\n      await this.db.clear(this.STORE_NAME);\n    } catch (error) {\n      console.error('Error clearing translation cache:', error);\n    }\n  }\n\n  /**\n   * Deletes the entire database.\n   * Closes the current connection before deletion.\n   * \n   * @throws {Error} If database deletion fails\n   */\n  async clearDB(): Promise<void> {\n    try {\n      if (this.db) {\n        const dbName = this.db.name;\n        await this.db.close();\n        await deleteDB(dbName);\n        this.db = null as any;\n      }\n    } catch (error) {\n      console.error('Error deleting translation database:', error);\n    }\n  }\n\n  /**\n   * Creates the translations object store in the database.\n   * \n   * @param db - IndexedDB database instance\n   * @private\n   */\n  private createObjectStore(db: IDBPDatabase): void {\n    if (!db.objectStoreNames.contains(this.STORE_NAME)) {\n      db.createObjectStore(this.STORE_NAME);\n    }\n  }\n\n  /**\n   * Ensures the database is initialized before operations.\n   * \n   * @throws {Error} If the database is not initialized\n   * @private\n   */\n  private ensureDBInitialized(): void {\n    if (!this.db) {\n      console.warn('Translation database not initialized. Call init() first.');\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { TranslationConfig, TranslationValue, TranslationLanguage } from \"../interfaces/translation.interface\";\nimport { TranslationDBService } from \"./translate-db.service\";\n\n/**\n * Core service for handling translations in the application.\n * Provides methods for translation management, language switching, and caching.\n * \n * @remarks\n * This service implements an offline-first approach using IndexedDB for storage.\n * It handles both synchronous and asynchronous translation operations.\n * \n * @example\n * ```typescript\n * constructor(private translateService: TranslateService) {\n *   translateService.init({\n *     projectId: 'my-project',\n *     endpoint: 'https://api.example.com/translations',\n *     defaultLang: 'en',\n *     acceptedLanguages: ['en', 'fr', 'de']\n *   }).then(() => {\n *     translateService.setLanguage('fr');\n *   });\n * \n *   // Subscribe to language changes\n *   translateService.onLangChange.subscribe(lang => {\n *     console.log('Language changed to:', lang);\n *   });\n * }\n * ```\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TranslateService {\n  /** Current active language */\n  private currentLang: TranslationLanguage = \"en\";\n  \n  /** List of supported languages */\n  private acceptedLanguages: TranslationLanguage[] = [];\n  \n  /** In-memory cache of translations */\n  private translations = new Map<string, TranslationValue>();\n  \n  /** Service loading state */\n  private readonly loadingState = new BehaviorSubject<boolean>(true);\n  \n  /** Language change subject */\n  private readonly langChangeSubject = new BehaviorSubject<TranslationLanguage>(\"en\");\n  \n  /** Initialization promise */\n  private initPromise: Promise<void> | null = null;\n\n  constructor(private readonly dbService: TranslationDBService) {}\n\n  /**\n   * Observable that emits when the language changes.\n   * Subscribe to this to react to language changes.\n   */\n  get onLangChange(): Observable<TranslationLanguage> {\n    return this.langChangeSubject.asObservable();\n  }\n\n  /**\n   * Initializes the translation service with the provided configuration.\n   * Sets up IndexedDB storage and loads initial translations.\n   * \n   * @param config - Translation service configuration\n   * @throws {Error} If initialization fails or configuration is invalid\n   * @returns Promise that resolves when initialization is complete\n   */\n  async init(config: TranslationConfig): Promise<void> {\n    if (this.initPromise) return this.initPromise;\n\n    this.validateConfig(config);\n    \n    this.initPromise = (async () => {\n      try {\n        this.acceptedLanguages = [...config.acceptedLanguages];\n        await this.setLanguage(config.defaultLang);\n        await this.dbService.init(config);\n        await this.loadTranslations(config);\n        this.loadingState.next(false);\n      } catch (error) {\n        console.error(\"Error initializing translation service:\", error);\n        this.loadingState.next(false);\n        throw new Error(\"Translation initialization failed\");\n      }\n    })();\n\n    return this.initPromise;\n  }\n\n  /**\n   * Gets the loading state as an observable.\n   * @returns Observable<boolean> indicating if the service is loading\n   */\n  get isLoading(): Observable<boolean> {\n    return this.loadingState.asObservable();\n  }\n\n  /**\n   * Gets the current active language.\n   * @returns The current language code\n   */\n  get currentLanguage(): TranslationLanguage {\n    return this.currentLang;\n  }\n\n  /**\n   * Gets the list of supported languages.\n   * @returns Array of accepted language codes\n   */\n  get supportedLanguages(): TranslationLanguage[] {\n    return [...this.acceptedLanguages];\n  }\n\n  /**\n   * Asynchronously retrieves a translation for the given key.\n   * Waits for service initialization before returning the translation.\n   * \n   * @param key - Translation key to look up\n   * @returns Promise resolving to the translated string\n   * @throws {Error} If service is not initialized\n   */\n  async translate(key: string): Promise<string> {\n    await this.waitForInitialization();\n    return this.getTranslation(key);\n  }\n\n  /**\n   * Synchronously retrieves a translation for the given key.\n   * Falls back to key if translation is not found.\n   * \n   * @param key - Translation key to look up\n   * @returns Translated string or key if not found\n   * @throws {Error} If service is not initialized\n   */\n  instant(key: string): string {\n    if (!this.initPromise) {\n      console.warn('Translation service not initialized. Please provide configuration in your app.config.ts');\n      return key;\n    }\n    \n    return this.loadingState.value \n      ? this.getTranslationFallback(key)\n      : this.getTranslation(key);\n  }\n\n  /**\n   * Changes the current active language.\n   * Emits the new language to subscribers.\n   * \n   * @param lang - Language code to switch to\n   * @throws {Error} If service is not initialized or language is not supported\n   * @returns Promise that resolves when the language is set\n   */\n  async setLanguage(lang: TranslationLanguage): Promise<void> {\n    // During initialization, we don't need to wait\n    if (this.initPromise && !this.loadingState.value) {\n      await this.waitForInitialization();\n    }\n    \n    if (!this.isLanguageSupported(lang)) {\n      console.warn(`Warning: Language '${lang}' is not supported. Falling back to default '${this.acceptedLanguages[0]}'`);\n      lang = this.acceptedLanguages[0];\n    }\n    \n    this.currentLang = lang;\n    this.langChangeSubject.next(lang);\n  }\n\n  /**\n   * Checks if a language is supported.\n   * During initialization, all languages are considered supported.\n   * \n   * @param lang - Language code to check\n   * @returns True if the language is supported, false otherwise\n   */\n  isLanguageSupported(lang: TranslationLanguage): boolean {\n    // During initialization, consider all languages supported\n    if (this.loadingState.value) {\n      return true;\n    }\n    return this.acceptedLanguages.includes(lang);\n  }\n\n  /**\n   * Clears the module-specific translation cache.\n   * Reloads translations after clearing.\n   */\n  async clearModuleCache(): Promise<void> {\n    await this.dbService.clearCache();\n    this.translations.clear();\n    await this.waitForInitialization();\n  }\n\n  /**\n   * Clears all translation caches.\n   * Reloads translations after clearing.\n   */\n  async clearAllCache(): Promise<void> {\n    await this.dbService.clearDB();\n    this.translations.clear();\n    await this.waitForInitialization();\n  }\n\n  /**\n   * Validates the translation configuration.\n   * \n   * @param config - Configuration to validate\n   * @throws {Error} If configuration is invalid\n   * @private\n   */\n  private validateConfig(config: TranslationConfig): void {\n    if (!config.acceptedLanguages?.length) {\n      console.warn('acceptedLanguages must be provided and contain at least one language code');\n      throw new Error('acceptedLanguages must be provided and contain at least one language code');\n    }\n    \n    if (!config.acceptedLanguages.includes(config.defaultLang)) {\n      console.warn(`defaultLang '${config.defaultLang}' must be included in acceptedLanguages`);\n      throw new Error(`defaultLang '${config.defaultLang}' must be included in acceptedLanguages`);\n    }\n  }\n\n  /**\n   * Ensures the service is initialized before proceeding.\n   * @throws {Error} If service is not initialized\n   */\n  private async waitForInitialization(): Promise<void> {\n    if (!this.initPromise) {\n      console.warn(\"Warning: Translation service not initialized. Using default fallback.\");\n      return;\n    }\n    await this.initPromise;\n  }\n\n  /**\n   * Retrieves a translation for the given key.\n   * Falls back to fallback language if translation is not found.\n   * \n   * @param key - Translation key to look up\n   * @returns Translated string or fallback\n   */\n  private getTranslation(key: string): string {\n    const translation = this.translations.get(key);\n    if (!translation) {\n      return this.getTranslationFallback(key);\n    }\n\n    const value = translation[this.currentLang];\n    return value ?? this.getTranslationFallback(key);\n  }\n\n  /**\n   * Gets a fallback translation when the primary translation is not found.\n   * Returns the first available translation or the key itself.\n   * \n   * @param key - Translation key to look up\n   * @returns Fallback translation or key\n   */\n  private getTranslationFallback(key: string): string {\n    const translation = this.translations.get(key);\n    if (translation) {\n      // First try the default language from config\n      const defaultValue = translation[this.acceptedLanguages[0]];\n      if (defaultValue) return defaultValue;\n\n      // Then try any available language\n      const languages = Object.keys(translation);\n      if (languages.length > 0) {\n        return translation[languages[0]];\n      }\n    }\n    return key;\n  }\n\n  /**\n   * Loads translations from the API or cache.\n   * Stores translations in both memory and IndexedDB.\n   * \n   * @param config - Translation configuration\n   * @throws {Error} If translations cannot be loaded\n   */\n  private async loadTranslations(config: TranslationConfig): Promise<void> {\n    try {\n      const response = await fetch(`${config.endpoint}?projectId=${config.projectId}&apiKey=${config.apiKey}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n      });\n  \n      if (!response.ok) {\n        console.warn(`Warning: Failed to fetch translations from API: ${response.statusText}`);\n        return await this.loadFromCache();\n      }\n  \n      const data: { [key: string]: TranslationValue } = await response.json();\n      \n      await Promise.all(\n        Object.entries(data).map(async ([key, value]) => {\n          await this.dbService.saveToCache(key, value);\n          this.translations.set(key, value);\n        })\n      );\n    } catch (error) {\n      console.warn(\"Warning: Error loading translations from API:\", error);\n      await this.loadFromCache();\n    }\n  }\n  \n  /**\n   * Loads translations from the cache as a fallback.\n   */\n  private async loadFromCache(): Promise<void> {\n    const cachedTranslations = await this.dbService.getAllFromCache();\n    \n    if (Object.keys(cachedTranslations).length > 0) {\n      Object.entries(cachedTranslations).forEach(([key, value]) => {\n        this.translations.set(key, value);\n      });\n      console.info(\"Loaded translations from cache.\");\n    } else {\n      console.warn(\"No cached translations found. Defaulting to keys.\");\n    }\n  }  \n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, startWith } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TranslateService } from '../services/translate.service';\n\n/**\n * A pipe that translates text based on the current language setting.\n * \n * @remarks\n * This pipe returns an Observable<string> and must be used with the async pipe.\n * The async pipe automatically handles subscription cleanup, preventing memory leaks.\n * \n * Memory Management:\n * - Safe from memory leaks as the async pipe handles subscription cleanup\n * - Each pipe instance creates one subscription to onLangChange\n * - Subscriptions are automatically cleaned up when component is destroyed\n * \n * Performance:\n * - Uses startWith(null) to emit initial translation\n * - Only re-renders when language changes or key changes\n * - No manual change detection required\n * \n * @example\n * ```html\n * <!-- Basic usage -->\n * {{ 'TRANSLATION_KEY' | appTranslate | async }}\n * \n * <!-- With a variable -->\n * {{ myKey | appTranslate | async }}\n * \n * <!-- In an attribute -->\n * <div [title]=\"'TOOLTIP_KEY' | appTranslate | async\">\n * ```\n * \n * @see {@link TranslateService} for the underlying translation service\n * @see {@link https://angular.io/api/common/AsyncPipe} for async pipe documentation\n */\n@Pipe({\n  name: 'appTranslate',\n  standalone: true\n})\nexport class TranslatePipe implements PipeTransform {\n  constructor(private translateService: TranslateService) {}\n\n  /**\n   * Transforms a translation key into an Observable of translated text.\n   * \n   * @param key - The translation key to look up\n   * @returns Observable<string> that emits the translated text whenever the language changes\n   * \n   * @example\n   * ```typescript\n   * // In your component\n   * translatePipe.transform('MY_KEY').subscribe(translated => {\n   *   console.log(translated);\n   * });\n   * ```\n   */\n  transform(key: string): Observable<string> {\n    return this.translateService.onLangChange.pipe(\n      startWith(null),\n      map(() => this.translateService.instant(key))\n    );\n  }\n}","import { APP_INITIALIZER, ModuleWithProviders, Provider } from \"@angular/core\";\nimport { TranslateService } from \"../services/translate.service\";\nimport { TranslationConfig } from \"../interfaces/translation.interface\";\nimport { TranslatePipe } from \"../pipes/translate.pipe\";\n\n/**\n * Provides the translation service and its dependencies.\n * Sets up automatic initialization of the service.\n * \n * @param config - Translation service configuration\n * @returns Array of providers for the translation service\n * \n * @example\n * ```typescript\n * // In app.config.ts\n * import { ApplicationConfig } from '@angular/core';\n * import { provideTranslate } from 'ngx-translate-db';\n * \n * export const appConfig: ApplicationConfig = {\n *   providers: [\n *     provideTranslate({\n *       projectId: 'my-app',\n *       endpoint: 'https://api.translations.com/v1',\n *       defaultLang: 'en'\n *     })\n *   ]\n * };\n * ```\n */\nexport function provideTranslate(config: TranslationConfig): Provider[] {\n  return [\n    TranslateService,\n    TranslatePipe,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (translateService: TranslateService) => () => translateService.init(config),\n      deps: [TranslateService],\n      multi: true\n    }\n  ];\n}\n","/*\n * Public API Surface of ngx-translate-db\n */\nexport { TranslateService } from \"./lib/services/translate.service\";\nexport { TranslatePipe } from \"./lib/pipes/translate.pipe\";\nexport { provideTranslate } from \"./lib/providers/translate.provider\";\nexport {\n  TranslationConfig,\n  TranslationValue,\n  TranslationLanguage,\n  Translations,\n} from \"./lib/interfaces/translation.interface\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.TranslationDBService","i1.TranslateService"],"mappings":"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"}